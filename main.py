import tkinter as tk
from tkinter import ttk, messagebox
import nmap
import json
import requests
import socket
import paramiko
import threading

# Load common passwords from GitHub repository
passwords_url = 'https://raw.githubusercontent.com/vlhomme/list-of-most-common-password/master/passwords.json'
passwords_response = requests.get(passwords_url)
common_passwords = json.loads(passwords_response.text)

# Load common usernames from GitHub Gist
usernames_url = 'https://gist.githubusercontent.com/kivox/920c271ef8dec2b33c84e1f2cc2977fc/raw/77e5d15c626f3da529e4c78aa3c1b3203b8d8dbb/common_usernames.txt'
usernames_response = requests.get(usernames_url)
common_usernames = usernames_response.text.splitlines()

def scan_network():
    target = target_entry.get()
    if not target:
        messagebox.showerror("Error", "Please enter a target (URL/IP) to scan.")
        return

    additional_ports = additional_ports_entry.get()
    ports_to_scan = ['-p', '1-1000']  # Default ports to scan
    if additional_ports:
        try:
            ports_to_scan.extend(['-p', additional_ports])
        except ValueError:
            messagebox.showerror("Error", "Invalid port format. Please enter a comma-separated list of ports.")
            return

    output_text.delete(1.0, tk.END)
    output_text.insert(tk.END, "Starting network scan...\n")

    scan_thread = threading.Thread(target=perform_scan, args=(target, ports_to_scan))
    scan_thread.start()

def perform_scan(target, ports_to_scan):
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments=ports_to_scan)

    for host in scanner.all_hosts():
        output_text.insert(tk.END, f"Scanning host: {host}\n")

        for proto in scanner[host].all_protocols():
            output_text.insert(tk.END, f"  Protocol: {proto}\n")
            ports = scanner[host][proto].keys()

            for port in ports:
                port_info = scanner[host][proto][port]
                output_text.insert(tk.END, f"    Port: {port} - State: {port_info['state']}\n")
                if port_info['state'] == 'open':
                    output_text.insert(tk.END, "      Potential vulnerability found: Open port\n")
                    output_text.insert(tk.END, "      Suggestion: Close unnecessary ports to reduce attack surface\n")
                if 'version' in port_info and port_info['version'].lower() != 'unknown':
                    version = port_info['version']
                    output_text.insert(tk.END, f"      Software version: {version}\n")
                    if is_outdated(version):
                        output_text.insert(tk.END, "      Potential vulnerability found: Outdated software\n")
                        output_text.insert(tk.END, "      Suggestion: Update software to the latest version\n")
                if 'ssh' in port_info['name']:
                    if is_weak_credentials(host, port, common_usernames, common_passwords):
                        output_text.insert(tk.END, "      Potential vulnerability found: Weak SSH credentials\n")
                        output_text.insert(tk.END, "      Suggestion: Enforce strong password policies\n")
                if port in [80, 443]:
                    if not is_encrypted_service(host, port):
                        output_text.insert(tk.END, f"      Potential vulnerability found: Unencrypted service on port {port}\n")
                        output_text.insert(tk.END, "      Suggestion: Enable encryption (e.g., SSL/TLS) for sensitive services\n")
                elif port == 21:
                    if not is_encrypted_service(host, port):
                        output_text.insert(tk.END, f"      Potential vulnerability found: Unencrypted service on port {port}\n")
                        output_text.insert(tk.END, "      Suggestion: Avoid using FTP and switch to SFTP or FTPS for secure file transfer\n")
                elif port == 23:
                    output_text.insert(tk.END, f"      Potential vulnerability found: Unencrypted service on port {port}\n")
                    output_text.insert(tk.END, "      Suggestion: Avoid using Telnet due to security risks. Switch to SSH for secure remote access\n")

    output_text.insert(tk.END, "Scan complete.\n")

def is_outdated(version):
    latest_version = '1.0.0'
    return version < latest_version

def is_weak_credentials(host, port, common_usernames, common_passwords):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for username in common_usernames:
        for password in common_passwords:
            try:
                ssh.connect(host, port=port, username=username, password=password, timeout=5)
                return True
            except paramiko.AuthenticationException:
                pass
            except Exception as e:
                print(f"Error: {e}")
    ssh.close()
    return False

def is_encrypted_service(host, port):
    if port == 80:
        try:
            with socket.create_connection((host, port)) as sock:
                sock.send(b'GET / HTTP/1.1\r\nHost: example.com\r\n\r\n')
                response = sock.recv(1024).decode('utf-8')
                if 'Location: https://' in response:
                    return True
                else:
                    return False
        except Exception as e:
            print(f"Error checking port {port}: {e}")
            return False
    elif port == 443:
        return True
    else:
        return True

root = tk.Tk()
root.title("Network Vulnerability Scanner")

target_label = ttk.Label(root, text="Enter Target (URL/IP):")
target_label.pack(pady=5)
target_entry = ttk.Entry(root, width=50)
target_entry.pack()

additional_ports_label = ttk.Label(root, text="Additional Ports to Scan (comma-separated):")
additional_ports_label.pack(pady=5)
additional_ports_entry = ttk.Entry(root, width=50)
additional_ports_entry.pack()

scan_button = ttk.Button(root, text="Scan Network", command=scan_network)
scan_button.pack(pady=10)

output_text = tk.Text(root, width=80, height=20)
output_text.pack(fill=tk.BOTH, expand=True)

root.mainloop()